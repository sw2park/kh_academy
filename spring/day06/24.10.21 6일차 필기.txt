1. 서블릿 필터 - 인증 체크
 - 인증 체크 필터를 개발.
   로그인 되지 않은 사용자는 상품관리 뿐만 아니라 미래에 개발될 예정인 페이지에도 접근하지 못하도록 한다.

2. 스프링 인터셉터
 2-1. 인터셉터란?
   - 스프링 인터셉터도 서블릿 필터와 같이 웹과 관련된 공통 관심 사항을 효과적으로 해결할 수 있는 기술이다.
   - 서블릿 필터가 서블릿이 제공하는 기술이라면, 스프링 인터셉터는 스프링 MVC가 제공하는 기술이다.
     둘다 웹과 관련된 공통 관심 사항을 처리하지만, 적용되는 순서와 범위, 그리고 사용 방법이 다르다. 
   - 즉, 인터셉터가 더 디테일한 컨트롤이 가능하다.
 2-2. 스프링 인터셉터 흐름
   - HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 스프링 인터셉터 -> 컨트롤러
   - 스프링 인터셉터는 디스패처 서블릿과 컨트롤러 사이에서 컨트롤러 호출 직전에 호출 된다.
   - 스프링 인터셉터는 스프링 MVC가 제공하는 기능이기 때문에 결국 디스패처 서블릿 이후에 등장하게 된다. (스프링 MVC의 시작점이 디스패처 서블릿이라고 생각하면 이해가 될 것이다.)
   - 스프링 인터셉터도 URL패턴을 적용할 수 있는데, 서블릿 URL패턴과는 다르고, 매우 정밀하게 설정할 수 있다. 
 2-3. 스프링 인터셉터 제한
     // 로그인한 사용자가 요청 시,
   - HTTP 요청 -> WAS -> 필터 -> 스프링 인터셉터 -> 컨트롤러
     // 비 로그인 사용자 요청 시, 
   - HTTP 요청 -> WAS -> 필터 -> 스프링 인터셉터(적절하지 않은 요청이라고 판단, 컨트롤러 호출 X)
 2-4. 스프링 인터셉터 체인
   - HTTP 요청 -> WAS -> 필터 -> 서블릿 -> 인터셉터1 -> 인터셉터2 -> 컨트롤러
   - 스프링 인터셉터는 체인으로 구성되는데, 중간에 인터셉터를 자유롭게 추가할 수 있다.
   - 예를 들어 로그를 남기는 인터셉터를 먼저 적용하고, 그 다음에 로그인 여부를 체크하는 인터셉터를 만들 수 있다.
   - 지금까지 내용을 보면 서블릿 필터와 호출되는 순서만 다르고, 제공하는 기능은 비슷해 보인다.
     그러나, 스프링 인터셉터는 서블릿 필터보다 편리하고, 더 정교하게 다양한 기능을 지원한다.
 2-5. 스프링 인터셉터 인터페이스
   - HandlerInterceptor 인터페이스를 구현
   - 서블릿 필터의 경우 단순하게 doFilter()하나만 제공된다.
   - 인터셉터는 컨트롤러 호출 전(preHandle), 호출 후(postHandle), 요청 완료 이후(afterCompletion)와 같이 단계적으로 잘 세분화 되어 있다.
 2-6. 인터셉터의 정상적인 흐름
   - preHandle
     : 컨트롤러 호출 전에 호출된다.
      true이면 다음으로 진행, false이면 더 진행하지 않는다.
      false인 경우 나머지 인터셉터는 물론, 컨트롤러 호출도 되지 않는다.
   - postHandle
     : 컨트롤러 호출 후에 호출된다.
   - afterCompletion
     : 뷰가 렌더링 된 이후에 호출된다.
 2-7. 정리
   - 인터셉터는 스프링 MVC 구조에 특화된 필터 기능을 제공한다고 이해하면 된다.
     스프링 MVC를 사용하고, 특별히 필터를 꼭 사용해야 하는 상황이 아니라면 인터셉트를 사용하는 것이 더 편리하다.