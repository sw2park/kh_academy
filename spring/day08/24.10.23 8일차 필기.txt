1. 영속성 컨텍스트의 이점
 - 1차 캐시
 - 동일성(identity) 보장
 - 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)
 - 변경감지(Dirty Checking)
 - 지연로딩(Lazy Loading)
 1-1. 엔티티 조회, 1차 캐시
   - 영속성 컨텍스트와 식별자 값
	-> 엔티티를 식별자 값(@id로 테이블의 기본 키와 매핑한 값)으로 구분
	-> 영속 상태는 식별자 값이 반드시 있어야 한다. 
	-> 식별자 값이 없으면 예외 발생
   - 영속성 컨텍스트와 데이터베이스 저장
	-> JPA 보통 트랜잭션을 커밋하는 순간 영속성 컨텍스트에 새로 저장된 엔티티를 데이터베이스에 반영
	-> 플러시(flush)
 1-2. 쓰기지연
	em.persist(memberA);
	em.persist(memberB);
	-> commit이 된 이후, 그때 쿼리가 실행
 1-3. 엔티티 수정 변경 감지
	// 트랜잭션 시작
	// 조회
	Member memberA = em.find(Member.class, "memberA");

	// 데이터 수정
	memberA.setUsername("hi");
	memberA.setAge(10);
	
	// em.update(memberA); // 없는 코드

	commit();
   - flush()가 호출되는 시점에 Entity와 스냅샷을 전부 비교 후(최적화 알고리즘으로...) 변경이 된것을 감시(Dirty Checking)한 후에 update 쿼리를 날린다.

2. 플러시
 - 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영
 - 변경감지
 - 수정된 엔티티 쓰기 지연 SQL저장소에 등록
 - 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송(등록, 수정, 삭제 쿼리)
 2-1. 영속성 컨텍스트를 플러시하는 방법
   - em.flush() : 직접호출
   - 트랜잭션 커밋 : 플러쉬 자동 호출
   - JPQL 쿼리 실행 : 플러쉬 자동 호출
   - 플러시는
	-> 영속성 컨텍스트를 비우지 않음
	-> 영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화
	-> 트랜잭션이라는 작업 단위가 중요 : 커밋 직전에만 동기화 하면 됨

3. 준영속 상태
 - 영속 -> 준영속
 - 영속상태의 엔티티가 영속성 컨텍스트에서 분리
 - 영속성 컨텍스트가 제공하는 기능을 사용 못함
 3-1. 준영속상태로 만드는 방법(알아만 둘 것)
   - em.detach(entity) : 특정 엔티티만 준영속 상태로 전환
   - em.clear() : 영속성 컨텍스트를 완전히 초기화
   - em.close() : 영속성 컨텍스트를 종료

4. 엔티티 매핑 소개
 - 객체와 테이블 매핑 : @Entity, @Table
 - 필드와 컬럼 매핑 : @Column
 - 기본 키 매핑 : @Id
 - 연관관계 매핑 : @ManyToOne, @JoinColumn
 4-1. @Entity
   - @Entity가 붙은 클래스는 JPA가 관리하는 엔티티라고 한다.
   - JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수
   - 주의
    : 기본 생성자 필수
    : final 클래스, enum, interface, inner 클래스 사용X
    : 저장할 필드값에 final 사용X
   - @Entity 속성
	-> name : JPA에서 사용할 엔티티 이름을 지정한다.
	-> 클래스 이름을 그대로 사용
	-> 같은 클래스 이름이 없으면 가급적 기본값을 사용
 4-2. @Table
   - @Table은 엔티티와 매핑할 테이블을 지정
 4-3. 데이터베이스 스키마 자동 생성
   - DDL을 애플리케이션 실행 시점에 테이블 자동 생성
   - 테이블 중심 -> 객체 중심
   - 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL생성
   - 이렇게 생성된 DDL은 개발 장비에서만 사용(운영에서 사용해서는 절대 안된다.)
   - 생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용
   - 운영 장비에는 절대 create, create-drop, update 사용하면 안된다. 
   - 개발 초기 단계는 create 또는 update
   - 테스트 서버는 update 또는 validate
   - 스테이징과 운영서버는 validate 또는 none
 4-4. DDL생성 기능
   - 제약조건 추가 : 회원 이름은 필수, 10자 초과 X
	@Column(nullable=false, length=10)
   - 유니크 제약조건 추가
	@Table(uniqueConstraints = {@UniqueConstraint(name="NAME_AGE_UNIQUE", columnNames={"NAME", "AGE"})})
   - DDL 생성 기능은 DDL을 자동 생성할 때만 사용되고 JPA의 실행 로직에는 영향을 주지 않는다.
 4-5. @Lob
   - 데이터베이스 BLOB, CLOB 타입과 매핑
   - 지정할 수 있는 속성이 없다.
 4-6. @Transient
   - 필드 매핑 X
   - 데이터베이스에 저장X, 조회X
   - 주로 메모리상에만 임시로 어떤 값을 보관하고 싶을 때 사용
 4-7. 기본 키 매핑
   - @Id
   - @GeneratedValue
   - 직접 할당 : @Id만 사용
   - 자동 생성 : @GeneratedValue - 4가지, 전략
	-> IDENTITY : 데이터베이스 위임, mySql
	-> SEQUENCE : 데이터베이스 시퀀스 오브젝트 사용, ORACLE
	-> TABLE : 키 생성용 테이블 사용, 모든 DB에서 사용 가능한 방법. @TableGenerator 필요
	-> AUTO : 방언에 따라 자동 지정, 기본값
	-> 즉, AUTO는 DB 방언에 맞춰서 IDENTITY, SEQUENCE, TABLE 3개 중 하나가 선택이 된다.

5. 연관관계 매핑 기초
 - 객체와 테이블 연관관계의 차이를 이해
 - 객체의 참조와 테이블의 외래키를 매핑
 - 용어
	-> 방향(Direction) : 단방향, 양방향
	-> 다중성(Multiplicity) : 다대일(N:1), 일대다(1:N), 일대일(1:1), 다대다(N:M)
	-> 연관관계의 주인(Owner) : 객체 양방향 연관관계는 관리 주인이 필요
 - 객체를 테이블에 맞추어 데이터 중심으로 모델링하면, 협력 관계를 만들 수 없다.
 - 테이블은 외래키로 조인을 사용해서 연관된 테이블을 찾는다.
 - 객체는 참조를 사용해서 연관된 객체를 찾는다.
 - 테이블과 객체 사이에는 이런 큰 간격이 있다.

6. 단방향 연관관계
 - 객체 지향 모델링(객체 연관관계 사용)
