1. addFlashAttribute
 - rttr.addAttribute()
 -> 전달한 값은 url뒤에 붙으며, 리프레쉬해도 데이터가 유지된다.
 - rttr.addFlashAttribute()
 - > 전달한 값은 url뒤에 붙지 않는다. 일회성이라 리프레시할 경우 데이터가 소멸된다.
      따라서 맵을 이용하여 한번에 값 전달 할 것

2. 로그인 상태 유지 - 쿠키 사용
 - 영속 쿠키 : 만료 날짜를 입력하면 해당 날짜까지 유지
 - 세션 쿠키 : 만료 날짜를 생략하면 브라우저 종료 시까지만 유지

3. 로그인 상태 유지 - 세션
 - 세션을 생성한다.
	request.getSession(true);
	: 기본값(= request.getSession())
	 세션이 있으면 기존 세션을 반환,
	 세션이 없으면 새로운 세션 생성해서 반환
	request.getSession(false);
	: 세션이 있으면 기존 세션 반환, 세션이 없으면 새로운 세션을 생성하지 않는다. null 반환
 - HttpSession 타임 아웃 기능
 : server.servlet.session.timeout=60
	60초, 기본은 1800(30분)
	분단위로 설정해야 한다.
	60보다 작은 값은 안된다.

4. @SessionAttribute
 - 스프링에서 세션을 더 편리하게 사용
 - 이 기능은 세션을 생성하지 않는다.

5. 서블릿 필터
 - 필터는 서블릿이 지원하는 수문장
 5-1. 필터흐름
   - HTTP요청 -> WAS -> 필터 -> 서블릿 -> 컨트롤러 
   - 필터를 적용하면 필터가 호출 된 다음에 서블릿이 호출된다. 
   - 모든 고객의 요청 로그를 남기는 요구사항이 있다면 필터를 사용하면 된다.
   - 참고로 필터는 특정 url 패턴에 적용할 수 있고, /* 이라고 하면 모든 요청에 필터가 적용된다.
   - 서블릿은 스프링의 디스패처 서블릿으로 생각하면 된다. 
 5-2. 필터 체인
   - HTTP요청 -> WAS -> 필터1 -> 필터2 -> 필터3 -> 서블릿 -> 컨트롤러
   - 필터는 체인으로 구성되는데, 중간에 필터를 자유롭게 추가할 수 있다.
     예를 들어 로그를 남기는 필터를 먼저 적용하고, 그 다음에 로그인 여부를 체크하는 필터를 만들 수 있다. 
 5-3. 필터 메서드
   - init() : 필터 초기화 메서드, 서블릿 컨테이너가 생성될 때 호출
   - doFilter() : 고객의 요청이 올 때마다 해당 메서드가 호출된다. 필터의 로직을 구현
   - destroy() : 필터 종료 메서드, 서블릿 컨테이너가 종료될 때 호출