1. 클래스, 메서드, 상수의 이름 규칙
 1-1. 공통 이름 규칙
  - 영어 + 숫자 + 언더바(_)의 조합이고, 첫 글자는
  반드시 영어로 표기한다

 1-2. 클래스 이름 규칙
  - 첫 글자는 대문자로 시작, 나머지 글자는 소문자로
  표시한다
  - 두 개 이상의 단어를 조합해야 할 경우 새로운
  단어는 대문자로 시작한다
  
	class MyClass
	class Student
	class NetworkHelper

 1-3. 메서드, 변수 이름 규칙
  - 대부분 소문자로 구성되지만, 두 개 이상의 
  단어를 조합할 경우 새로운 단어는 대문자로 표시
	int age;
	String userName;

 1-4. 상수 이름 규칙
  - 모두 대문자로 표시한다
  	final double PI;
	final int COLOR;

2. 생성자
 2-1. 생성자란?
  - new 키워드를 사용해여 객체가 생성될 때
  자동으로 실행되는 특수한 형태의 메서드
  - 리턴형을 명시하지 않으며, 메서드의 이름은
  클래스와 동일하다.
	Member m = new Member();
	class Member{
		Member(){

		}
	}
  - 자동으로 실행된다는 특성 때문에, 객체가 
  생성되면서 해당 객체의 특성을 초기화 하기 
  위하여 사용된다.
  (ex:멤버변수의 초기값을 할당하는 용도)

 2-2. 기본 생성자
  - 파라미터가 없는 생성자
  - 클래스에 특별히 생성자가 정의되지 않은 경우,
  java 컴파일러는 다음과 같은 기본 생성자가
  존재한다고 인식
 class User{
	User(){
	 // 생성자는 있지만, 내용은 비어있다
	}
 }
 
 2-3. 생성자의 활용
  - 생성자는 멤버변수의 값을 초기화 하기 위해 사용

 2-4. 파라미터를 갖는 생성자
  - 생성자도 메서드의 한 종류이므로 파라미터를
  정의하는 것이 가능하다
  - 생성자의 파라미터를 멤버변수에 복사하는 것으로
  객체의 초기화를 외부적인 요인에 의해 처리할 수
  있다.

3. null
 - 참조 변수가 어떤 객체도 가리키지 않음을 나타냄
 

4. 은닉성
 4-1. 은닉성 이란?
  - 멤버변수나 메서드가 객체에 노출되지 않도록
  설정하는 기법
  - 객체를 사용하는 측의 실수로 인한 기능의 
  오작동을 방지하기 위해, 클래스의 일부를 숨기는
  처리를 말한다.

 4-2. 적용방법
  - 변수의 이름이나 메서드 이름앞에 
  "접근한정자"를 지정한다.
  - public
	-> 모든 곳에서 접근 가능하다
	일반적으로 모든 메서드앞에 명시한다.
  - private
	-> 클래스 안에서만 사용가능하고, 
	객체를 통해 접근할 수 없다.
	일반적으로 모든 멤버변수 앞에 명시한다
  - protected
	-> 현재 클래스 내의 다른 자원이나,
	같은 패키지 안에 존재하는 클래스와
	하위 클래스에서 접근 가능하다.
	잘 사용하지 않는다.
  - default
	-> 접근 한정자를 명시하지 않은 경우.
	현재 클래스 내의 다른 자원이나
	동일 패키지 내의 다른 클래스에서
	접근 가능하다. 잘 사용하지 않는다.

5. getter, setter
 - 멤버변수가 은닉된 형태로 선언된 경우
 프로그램의 가장 근본적인 목적인 데이터에 
 접근하는 방법이 사라지므로 메서드를 통하여
 간접적으로 접근하는 방법이 마련되어야 한다.
 - getter, setter는 은닉된 멤버변수에 간접적으로
 접근하기 위하여 정의된 메서드들을 의미하는 용어
	-> getter 
	: 은닉된 멤버변수의 값을 리턴하기 위한
	메서드
	-> setter
	: 파라미터로 전달된 값을 멤버변수에
	복사하기 위한 메서드
 5-1. 메서드 작성 예
  - 멤버변수
	String userName;
  - getter
	String getUserName(){}
  - setter
	void setUserName(Strimg userName){}

  - 멤버변수
	int userAge;
  - getter
	int getUserAge()
  - setter
	void setUserAge(int userAge)
	
6. getter, setter 사용 이유
 6-1. 캡슐화
  - 접근 제한자는 객체지향의 캡슐화, 그리고 그를 통한
  코드 은닉화를 위한 도구이다. 데이터를 외부로부터
  숨기거나, 접근을 막고 또는 접근에 처리를 강제한다.

 6-2. setter

 6-3. getter

 6-4. 자바빈즈(JavaBeans)
  - 자바 언어에서 사용하는 복합적 데이터 표현의 최소 단위,
  재사용 가능한 컴포넌트(구성요소)를 생성할 수 있다.
  - 자바빈즈 클래스로서 작동하기 위해서는 객체 클래스는
  명명법, 생성법 그리고 행동에 관련된 일련의 관례를
  따라야만 한다. 
  - 클래스는 생성자를 가지고 있어야한다.
  - 클래스의 속성들은 get,set 메서드들을 사용해 접근할 수
  있어야한다. 

7. 클래스에 접근 한정자를 지정한 경우
 - public
	-> 객체 생성 가능하다.
	서로 다른 소스코드에 정의된 클래스끼리도 객체 
	생성이 가능하다.
 - private
	-> 클래스에 적용할 수 없다
 - protected
	-> 클래스에 적용할 수 없다
 - default
	-> 동일한 소스코드에 정의된 클래스끼리만
 	객체로 생성 가능하다.(지금까지의 예제 형태)

 7-1. 클래스의 분리
  - 하나의 소스코드에서 프로그램의 모든 기능을 구현하게
  되면 유지보수에 비효율적이므로, 기능단위로 소스코드를
  분리해야 한다
  - 다른 패키지 내에서 소스코드가 분리된 클래스끼리는 
  public이 명시되어야만 서로 객체 생성이 가능하다.
  - 일반적으로 클래스 정의에는 public 접근 한정자만 사용할
  수 있다.
  - 하나의 소스코드에는 하나의 public 클래스만 존재할 수
  있다.

8. 상속성
 8-1. 클래스 간의 상속이란?
  - 클래스간에는 부모-자식의 상속 관계를 설정할 수 있다
  - 부모 클래스 A를 자식 클래스 B가 상속받을 때,
  B는 A의 모둔 멤버변수와 메서드를 자신의 것으로 
  상속받게 된다.
  (단, private로 설정된 기능은 상속되지 않는다)
  - 상속가능여부 : public, protected
  - B는 A의 public, protected 기능들을 직접적으로 코딩하지
  않더라도 자신의 것으로 사용할 수 있게 된다.

 8-2. 상속 정의 방법
  - extends 키워드를 사용하여 부모 클래스의 이름을 명시

  public class 자식클래스 extends 부모클래스{....}

 8-3. 클래스 다이어그램을 통한 상속의 표현
  - 클래스의 구조를 표현하는 클래스 다이어그램에서,
  상속은 자식 클래스가 부모 클래스를 가리키는 
  화살표로 표현한다.
  - 상속관계가 이루어질 때 부모 클래스를 super클래스라고
  한다.

 8-4. 상속의 활용
  - 기존에 존재하는 클래스의 소스 수정 없이 기능을
  확장하고자 하는 경우
  - 클래스 다이어그램에서 CalcChild클래스는 CalcParent 
  클래스를 상속받기 때문에, 별도의 소스 코딩 없이도
  plus() 메서드와 minus() 메서드를 포함하게 된다.
  - CalcChild클래스에 times()메서드와 divide()메서드를
  추가하면, 상속받은 메서드에 새로운 기능을 추가하는
  효과를 얻을 수 있다

 8-5. 상속의 활용2
  - 















