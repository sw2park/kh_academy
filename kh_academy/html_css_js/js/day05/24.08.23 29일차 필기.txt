1. location
 - 웹 브라우저의 주소 표시줄을 제어
 - 그 일부를 조회할 수 있으며, 변경할 수도 있다. 
 1-1. location 정보
   - location.href : 문서의 URL 주소
   - location.host : 호스트 이름과 포트
   - location.pathname : 디렉토리 이하 경로
   - location.port : 포트번호 (80번 포트면 생략되어 console에서는 보이지 않을 수도 있음)
   - location.protocol : 프로토콜 종류
   - location.search : 조회부분
   - location.href = "주소값"
	=> 페이지 이동
   - location.reload() : 페이지 새로고침

2. history
 - 이전 페이지로 돌아가기
 - history.back() : 이전 페이지로 이동
 - history.forward() : 다음 페이지로 이동

3. Navigator
 - 브라우저의 정보를 조회하기 위한 속성들을 가지고 있는 객체

4. document
 - 문서 내에서 특정 태그에 해당하는 객체를 찾는 방법은 여러가지가 있다. 
 4-1. documnet.getElementsByTagName("태그명")
   - 인자로 전달된 태그명에 해당하는 객체들을 찾아서 유사 배열에 담아서 반환
 4-2. document.getElmentsByClassName('클래스명')
 4-3. document.getElmentBtId('아이디명')

5. 이벤트
 5-1. this
   - 이벤트가 발생한 대상을 필요로하는 경우 this를 통해서 참조할 수 있다.
 5-2. 이벤트 등록 방식 : inline
   - 이벤트를 이벤트 대상의 태그 속성으로 지정하는 것
   - 인라인 방식은 태그에 이벤트가 포함되기 때문에 이벤트의 소재를 파악하는 것이 편리하다.
     하지만 정보인 HTML과 제어인 Javascript가 혼재된 형태이기 때문에 바람직한 방법이라고 할 수는 없다.
 5-3. 프로퍼티 리스너
   - 프로퍼티 리스너 방식은 이벤트 대상에 해당하는 객체의 프로퍼티로 이벤트를 등록하는 방식이다.
   - 인라인 방식에 비해서 HTML과 Javascript를 분리할 수 있다는 점에서 선호되는 방식이다.
 5-4. 이벤트 객체
   - 이벤트가 실행된 맥락의 정보가 필요할 때는 이벤트 객체를 사용한다.
     이벤트 객체는 이벤트가 실행될 때 이벤트 핸들러의 인자로 전달된다.
 5-5. EventListener
   - 이벤트를 등록하는 가장 권장되는 방식이다.

6. 기본동작의 취소
 - 웹 브라우저의 구성요소들은 각각 기본적인 동작 방법을 가지고 있다.
 - a태그를 클릭하면 href 속성의 url 이동
 - 폼에서 submit 버튼을 누르면 데이터가 전송된다.
 6-1. inline 
   - return 방식이 false이면, 기본 동작 취소
