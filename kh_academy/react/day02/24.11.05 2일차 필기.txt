1. 컴포넌트란 무엇인가
 - 자바스크립트에서의 함수를 컴포넌트라고 한다.
 1-1. 리액트에서 컴포넌트같은 경우
   - 리액트는 자바스크립트에 붙어서 동작하는 라이브러리이다.
   - 자바같은 경우 class로 시작해서 class로 끝나는 편인데, 리액트같은 경우는 모든 실행단위가 컴포넌트로 구성되어있다.
   - 그래서 리액트는 보통 컴포넌트로 시작해서 컴포넌트로 끝난다고 생각하면 이해하기 쉽다.

2. 컴포넌트에서의 return
 - 모양은 html 태그처럼 보이지만 JSX(JavaScript eXtends)이다.
 - main.jsx에서 <App/>이 html 태그처럼 보이지만 리턴에 들어가있던 jsx 코드를 호출하는데, jsx코드를 받아서 리액트 내부 render()를 함수를 통해 렌더링을 하는 식으로 동작하고 있다.

3. useState - 상태란?
 - State는 변수처럼 사용 가능하고 상태값이라고 생각하면된다.

4. 리액트의 기본 구성요소
 - 컴포넌트 -> JS로 치면 함수
 - JSX -> JS로 치면 return 코드
 - State -> JS로 치면 변수
	-> State를 관리하기위해 hook이란 것도 있다.

5. 웹 페이지 구성 / 리액트 구성
 - HTML(뼈대) / 컴포넌트(JSX)
 - CSS(살) / CSS 
 - JS(내장기관) / JS
 - 같은 구성 요소인데 조금 더 구조화 되어있는 것을 알 수 있다.

6. 컴포넌트를 왜 이용하는가?
 - 컴포넌트는 결국 함수이다.
 ㄴ> 함수의 장점과 동일하게 재사용이 가능하다.
 ㄴ> 작은 블럭을 제작하고 UI로써 조립해서 사용 가능한 장점이다.
 - 컴포넌트는 내부에 HTML, JS, CSS를 모두 품고 있다어서 모듈화가 가능하다.

7. import / export 
 - 이름을 맘대로 설정하는 경우와 {}(중괄호)를 이용해서 설정하는 경우 이렇게 두 가지가 있다.

8. 리액트가 하는 일
 - 컴포넌트 안에 있는 JSX를 가상 DOM이라 부르는데 이것이 실제로 렌더링 되었을 때 실제 DOM, HTML코드로 변환하는 과정을 거친다.

9. 컴포넌트는 자바스크립트 함수의 형태
 9-1. 컴포넌트와 자바스크립트 함수의 차이
   - 컴포넌트 이름의 첫글자는 언제나 대문자 -> 컴포넌트와 HTML 태그를 구별하기 위해 대문자로 사용한다.
   - return 되는 코드는 리액트가 렌더링 할 수 있는 JSX코드여야만 한다.

10. 컴포넌트 호출
 - <Header/> 이런 형식으로 함수 내부의 return문 안에 호출해야 한다.

11. 리액트를 할 때 알아두면 좋은 것
 - 우리가 만드는 코드와 실제 렌더링된 홈페이지의 코드는 다르다는 것을 인지하고 작업을 진행해야한다.
 - 절대 주소를 갖고있는 파일을 렌더링하는 형식

12. React 프로젝트 구조
 - HTML > JS > React > JS > React(JSX)
 - 위 처럼 진행되기 때문에 웹페이지 렌더링될 때 React만 추가되었을 뿐, HTML때 구조와 다른게 없다.

13. React에서 포렌식 사용법
 - JSX에서 포렌식 데이터가 들어갈 수 있는데 {}(중괄호)를 넣어야한다.
 - if문, for문같은 문법은 들어가진 못하지만, 삼항연산자 같은 형식으로 대강 표현이 가능하다.
 - 하지만 JSX코드 내에 식을 넣는 것은 비권장하는 방법이다.
 - 그래서 return 전에 JS 문법을 사용할 수 있는데, JS 문법을 이용하여 연산처리를 하고, JSX코드 내에서는 변수명만 들어갈 수 있게 하는 방법을 권장한다.

14. 배포 관련
 - 배포를 할 때, 1개의 파일로 합치는 과정이 있는데 img 태그나 이미지 주소나 파일 주소를 하드코딩하면 유실될 가능성이 높기 때문에, 
 - import 문을사용해서 유실되는 상황을 회피할 수 있다.
 - import는 빌드 될때 기준으로 받아오는데 그 import문이 실행된 위치를 기준으로 경로가 짜여지는 것을 알고 있으면 좋다.

15. 정리
 - JSX코드는 JSX문법만을 사용해야 한다.
 - 자바스크립트의 '식'을 이용하고 싶다면 JSX코드 내부에서 {} 중괄호를 이용하여 접근해서 사용하면 된다.

========================================
단축키
- google chrome 단축키
Ctrl + Shift + J = 개발자모드 콘솔창 열기

- 프리티어 = 코드 정렬 및 무언가 빠져있는것들 자동으로 채워주는것
Alt + Shift + F = 프리티어 호출

- npm server 끄기
Ctrl + C