1. 메서드
 1-1. 메서드
  - 특정기능(=연산)을 그룹화 해서 재사용하기
  위한 단위

	public static void 메서드이름(){
		.. 수행할 연산식 ...
	}

 1-2. 메서드의 호출
  - 정의된 메서드는 다른 메서드를 구성하는 {...}
  안에서 다음의 형식으로 사용될 수 있으며, 
  이를 메서드를 호출한다고 한다.
	
	메서드이름();
 1-3. 메서드 파라미터(=매개변수)
  - 프로그램의 메서는 자신이 실행되는데 필요한
  조건값을 메서드 이름 뒤의 괄호안에서 변수 형태로
  선언한다. 이를 메서드 파라미터 라고 한다

	public static void 메서드이름(변수형 변수이름){
		... 
	}

	public static void 메서드이름(int num){
		... 
	}

 1-4. 다중 파라미터
  - 메서드가 연산을 수행하는데 두개 이상의 파라미터가
  필요하다면 콤마(,)로 구분하여 선언할 수 있다

	public static void 메서드이름(int num, boolean user){
		... 
	}

 1-5. 파라미터를 갖는 메서드의 호출
  - 메서드 정의하면서 파라미터가 명시되어 있다면 해당
  메서드를 호출하면서 파라미터를 전달해 주어야 한다

	메서드이름(10, true);

 1-6. 값을 반환하는 메서드
  - 메서드의 리턴값
  - 메서드가 연산 결과를 자신이 호출된 위치에 반환하는 
  것을 "리턴"이라고 하며, 반환되는 값을 "리턴값"이라고 한다
  - 메서드 안에서 값을 리턴하기 위해서는 "return" 키워드가
  사용된다
  - 값을 리턴하는 메서드는 선언시에 "void"키워드 대신,
  리턴하는 값에 대한 변수형이 명시된다. void라는 키워드는
  리턴값이 없다는 뜻이다

	public static 리터형 메서드이름(변수형 파람1){
		...
		return 리턴값;
	}

 1-7. 메서드간의 상호 호출
  - 메서드역시 서로 호출하는 것이 가능하다. 호출된
  메서드가 값을 리턴하는 경우, 리턴받은 값을 다른 연산자에
  사용할 수 있다

2. 클래스	
 2-1. 객체(Object)지향 프로그래밍
  - 객체가 중심이 되는 프로그래밍 기법

 2-2. 클래스(Class)
  - 객체의 설계도 역할을 하는 프로그램 소스
  - 공장에서 하나의 설계도를 사용하여 여러 개의 제품을
  생산할 수 있는 것처럼 하나의 클래스를 통해 동일한 
  구조를 갖는 객체를 여러개 생성할 수 있다.

 2-3. 객체를 구성하는 단위
  - 객체를 이루는것은 데이터와 기능
  	-> 데이터는 변수로 표현
	-> 객체안에 포함된 변수를 '필드', '멤버변수', 
	'프로퍼티'라고 한다
  - 기능은 메서드(=함수)로 표현된다.

 2-4. 클래스의 기본 작성 방법
	class 클래스이름{
		멤버변수;

		void 메서드이름(){
			...
		}
	}

 - 'class' 라는 예약어와 클래스의 이름을 명시 {...} 블록을
 구성한다.
 - 멤버변수는 여러 개 존재할 수 있다. 이 때, 값을 선언과
 동시에 할당할 수도 있고, 객체를 통해 간접적으로 할당할
 수 도 있다. 
 - 메서드는 여러 개 존재할 수 있다
 - 클래스 안에 포함된 멤버변수와 메서드를 특성에 따라
 그룹화 하기 위한 기법이 클래스를 작성하는 것이라고
 이해할 수 있다

 2-5. 객체의 생성 방법
  - 객체의 선언
	클래스이름 객체이름;

  - 객체의 할당
	객체이름 = new 클래스이름();

  - 선언와 할당의 통합
 	클래스이름 객체이름 = new 클래스이름();

 2-6. 객체의 사용
  - 객체 안에 포함된 변수나 메서드는 점(.)으로 연결하여
  접근한다. 
	-> 객체안에 멤버변수 접근
	객체이름.멤버변수;
	std1.name;
	std1.age;
	std2.name;

	String username = 객체이름.멤버변수;
			std1.name;

 	-> 객체 안에 포함된 변수의 값에 따른 값을 대입
	하는 경우
	
	객체이름.멤버변수 = 값;
	std1.name = "김자바";

	-> 객체안에 포함된 메서드 호출
	객체이름.메서드이름();

	-> 객체 안에 포함된 메서드에 파라미터 전달
	객체이름.메서드이름(값1,값2, ..);
	
 2-7. 값이 대입되지 않은 멤버변수를 갖는 클래스
  - 클래스란 객체를 위한 틀을 제공하는 것이기 때문에
  클래스 작성과정에서 멤버변수에 대입된 값은,
  객체를 통하여 멤버변수의 값을 지정하기 전까지 사용된
  "기본값" 으로서의 의미이다.
  - 객체를 통하여 새로운 값이 대입되면 클래스 작성시에
  멤버변수에 대입한 값은 의미를 잃어버리게 된다.
  - 때문에 일반적으로 클래스 작성시에는 멤버변수에 값을
  지정하지 않는다.

 2-8. 메서드를 포함하는 클래스
  - 메서드란 프로그램에서의 하나의 동작 단위를 의미한다
  - 두 개 이상의 메서드가 서로 동일한 대상을 위해서 
  존재할 경우, 이 메서드들을 클래스에 포함시켜 그룹화 할 
  수 있다. 
  - 클래스에 멤버변수와 메서드가 공존할 경우, 
  멤버변수는 모든 메서드가 공유하는 전역변수로 존재하게
  된다.

 2-9. 변수의 종류
  - 멤버변수(=전역변수)
	-> 클래스 안에서 선언된 변수로서, 클래스 블록
	범위 안에서 유효하다.

  - 지역변수
	-> 메서드 안에서 선언된 변수로서, 메서드의
	블록을 빠져나가지 못한다. 그러므로 다른 메서드는
 	해당 변수를 인식하지 못한다. 이 규칙은 조건,
	반복문과 같은 블록 {}을 형성하는 모든 경우에
	해당된다.
 2-10. 메서드만을 포함하는 클래스
  - 객체 안에 멤버변수(=데이터)가 포함되지 않는다.
  - 객체 안에 포함된 메서드를 호출하여 결과를 만들기 
  위한 목적이므로 굳이 여러 개의 객체를 생성할 필요가 
  없다.

3. this
 3-1. this
  - 자기 자신을 의미하는 키워드
  - 클래스 안에서 this를 사용하여 "자기자신"을 표현한다.

 3-2. this를 사용하여 지역변수와 멤버변수 구분하기
  - 멤버변수와 지역변수가 동일한 이름으로 공존할 경우,
  유효성 범위가 작은 변수가 우선적으로 인식된다.

  class Student{
	String name;

	public void setName(){
		String name;
		name = "자바학생";
	}
  }

 3-3. this를 사용하여 지역변수와 멤버변수 구분하기
  class Student{
	String name;

	public void setName(){
		String name;
		name = "자바학생";
		this.name = "김하나";
	}
  }

 3-4. this를 사용하여 파라미터와 멤버변수 구분하기
  - 파라미터도 해당 메서드 안에서만 유효한 지역변수의 
  일종이다
  - 파라미터를 사용하여 멤버변수의 값을 간접적으로 
  설정하고자 할 경우, 변수의 이름을 서로 다르게 
  사용하는 것 보다는 이름은 동일하게 지정하고 this 키워드를
  사용하여 멤버변수와 파라미터를 구별하는 것이 java언어의
  일반적인 처리 방식이다.

 class Student{
	String name;
	public void setName(String name){
		this.name = name;
	}
 }
 - 모든 멤버변수 앞에는 this키워드를 사용하여 멤버변수임을
 직관적으로 표시하는 것이 소스코드의 가독성을 위해서
 바람직하다. 

 3-5. 현재 클래스의 메서드를 의미하는 용도로서의 this
 - getName() 메서드는 this키워드를 사용하여 현재 클래스
 안에 포함된 다른 메서드임을 명시하고 있다
 - 하지만 메서드의 경우 다른 클래스의 메서드를 이름만으로
 호출할 수 있는 방법이 없기 때문에, this.getName()이 아닌
 getName()만 사용하더라도 코드 가독성의 문제는 없다. 

 class User{
	public String getName(){
		String name = "김하나";
		return name;
	}
	public void sayName(){
		String myname = this.getName();
		System.out.println(myname);
	}
 }











