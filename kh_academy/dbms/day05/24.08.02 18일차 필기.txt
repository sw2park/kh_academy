1. Drop vs Truncate vs Delete 
 1-1. Drop
   - drop table 테이블명; 
   - 만들었던 테이블이 전부 삭제된다. 존재 자체가 삭제된다. 
 1-2. Truncate
   - truncate table 테이블명;
   - 데이터만 통채로 삭제된다.
   - truncate는 테이블이 삭제되는 명령어는 아니고, 테이블 안에 들어있던 모든 레코드(행열 할 때 행)들을 제거하는 명령어이다. 
   - 즉, truncate만으로는 table 구조를 완전히 삭제하는 것은 아니라는 것이다. 
 1-3. Delete
   - delete from(생략가능) 테이블 where ...;(where은 조건 유무에 따라 생략 가능)
   - 데이터 골라서 삭제된다.(where 사용으로 인해)
   - truncate와 delete의 차이점
	-> delete는 where문으로 부분삭제 가능하다. / truncate는 부분삭제 불가능
	-> truncate는 DLL문이고, delete는 DML문이다.
	-> 내부 방식에 차이가 존재한다.
	-> truncate는 데이터를 drop 후에 테이블 create를 한다.
	-> delete는 한줄한줄 명령어를 삭제한다. 
	-> 로그파일 

2. COMMIT 
 - 모든 작업을 정상적으로 처리하겠다고 확정하는 명령어이다. 
 - 트랜젝션의 처리 과정을 데이터베이스에 반영하기 위해서, 변경된 내용을 모두 영구 저장한다. 
 - COMMIT을 수행하면, 하나의 트랜젝션 과정을 종료하게 된다. 
 - Transaction(Insert, Update, Delete)작업 내용을 실제 DB에 저장한다.
 - 이전 데이터가 완전히 Update된다.
 - 모든 사용자가 변경한 데이터의 결과를 볼 수 있다.

3. ROLLBACK
 - 작업 중 문제가 발생했을 때, 트랜젝션의 처리 과정에서 발생한 변경 사항을 취소하고, 트랜젝션 과정을 종료시킨다. 
 - 트랜젝션으로 인한 하나의 묶음 처리가 시작되기 이전의 상태로 되돌린다. 
 - transaction(insert, update, delete)작업 내용을 취소한다. 
 - 이전 commit 한 곳까지만 복구한다.
 - 트랜젝션 작업 중 하나라도 문제가 발생하면, 모든 작업을 취소해야 하기 때문에 하나의 논리적인 작업 단위로 구성해 놓아야한다. 
 - 문제가 발생하면, 논리적인 작업의 단위를 모두 취소해 버리면 되기 때문이다. 

4. commit 명령어와 rollback 명령어의 장점
 - 데이터 무결성이 보장된다.
 - 논리적으로 연관된 작업을 그룹화 할 수 있다. 

5. 자동 rollback 되는 경우
 - 비정상적인 종료

6. 자동 commit 되는 경우
 - DDL구문(create, alter, drop, truncate)
 - DCL구문(grant, revoke) 사용 권한 관련
 - insert, update, delete 작업 후 commit을 하지 않고, 오라클을 정상 종료시에 commit 명령어를 입력하지 않아도 정상 commit 후 오라클 종료

7. 데이터 제어어(Data Control Language)
 - 사용자에게 권한 생성 혹은 권한 삭제 같은 명령어
 - grant : 권한 생성 
 - revoke : 권한 삭제 

8. 컬럼속성 - 무결성 제약조건
 - not null : 널 값이 입력되지 못하게 하는 조건
 - unique : 중복된 값이 입력되지 못하게 하는 조건 
 - check : 주어진 값만 허용하는 조건
 - primary key : not null + unique의 의미 
 - foregin key(외래키) : 다른 테이블의 필드(컬럼)을 참조해서 무결성을 검사하는 조건
 8-1. primary key
   - primary key, 기본키, pk, 주키, 식별자 등으로 불리고 있다.
   - 기본키 역시 기본적인 제약조건들은 테이블을 생성할 때 같이 정의한다.
   - 테이블당 하나만 정의가 가능하다.
     (두개 이상의 PK는 조합키/복합키 라고 불리고, 묶어서 하나로 본다.)
   - pk는 not null + unique의 기능을 가지고 있다.
   - 자동 index가 생성되는데 이는 검색 키로서 검색 속도를 향상시킨다. 
 8-2. pk 선언방법
	create table pkTable(
	col1 varchar2(10) primary key, // 1번째 방법
	col2 varchar2(10) constraints pk이름 primary key, // 2번째 방법
	col3 varchar2(10), cosntraints pk이름 primary key(col3) // 3번째 방법
);
 8-3. Foreign Key(외래키)
   - 외래키, fk, 참조키, 외부키, 외부 식별자 등으로 불리고 있다. 
   - fk가 정의된 테이블을 자식 테이블이라 칭한다.
   - 참조되는 테이블 즉 pk가 있는 테이블을 부모 테이블이라 한다.
   - 부모테이블의 PK컬럼에 존재하는 데이터만 자식테이블에 입력할 수 있다.
   - 부모테이블은 자식의 데이터나 테이블이 삭제된다고 영향을 받지 않는다.
   - 참조하는 데이터 컬럼과 데이터 타입이 반드시 일치해야 한다. 
   - 참조할 수 있는 컬럼은 기본키(pk)이거나 unique만 가능하다. 보통(pk랑 엮는다.)
 8-4. fk 선언방법
	create table pTable(
		pCol1 number(10) primary key
	);
	crete table cTable(
		cCol1 number(10) primary key,
		pcol1 number(10), 
		constraints fk이름 Foreign key(pCol1) references pTable(pCol1) on delete cascade
	);
   - 참조할 컬럼과 같은 컬럼이 자식 테이블에 존재해야한다. 
   - 같은 이름을 쓸 필요는 없지만, 관계를 알아보기 쉽게 같은 컬럼명을 사용한다.
   - 자식테이블에 값을 먼저 넣을 수 없다.
   - 참조되는 컬럼에 데이터가 있어야 값을 넣을 수 있다. 
 8-5. 삭제 옵션
   - on delete cascade
	-> 참조되는 부모 테이블의 행에 대한 delete를 허용한다. 
	    즉, 참조되는 부모테이블 값이 삭제되면 연쇄적으로 자식테이블 값 역시 삭제된다. 
   - on delete set null 
	-> 참조되는 부모 테이블의 행에 대한 delete를 허용한다. 이건 cascade와 달리 부모 테이블의 값이 삭제되면 해당 참조되는 자식테이블의 값들은 null값으로 설정된다.

9. 시퀀스(Sequence)
 - 연속적인 번호를 만들어주는 기능
 - 시퀀스란 순차적으로 자동 증가하는 순번을 반환하는 데이터베이스 객체이다. 
   보통 PK값에 중복값을 방지하기위해 사용한다. (오라클에만 있는 기능이나 다른 DB에서 같은 개념의 다른 기능 있을 수도 있음)
 - 예를들어 게시판에 글이 하나 추가될때마다 글번호(PK)가 생겨야 한다고 가정하자, 만약 100번까지 글 번호가 생성되어 있다면 그 다음 글이 추가가 되었을 경우 글 번호가 101번으로 하나의 row를 생성해 주어야 한다.
   이때 101번이라고 하는 숫자를 얻으려면 기존 글 번호중 가장 큰 값에 +1을 하는 로직을 어딘가에 넣어야하는데 시퀀스를 이용하면 이러한 로직이 필요없이 데이터베이스에 row가 추가될때마다 자동으로 +1 시켜주어 매우 편리하다.
 9-1. 시퀀스 생성 옵션
   - start with n	: 초기화 값
   - increment by n	: 증가값 
   - maxvalue n	: 최대 값 지정 (~까지)
     nomaxvalue	: 무한대 값(기본세팅으로 무한대임)
   - minvalue n	: 최소 값 지정
     nominvalue	: 무한대 값
   - cycle		
     nocycle	: 기본값은 nocycle