/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-09-11 03:30:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.join;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class join_005fview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	#text{\r\n");
      out.write("		color: red;\r\n");
      out.write("		font-weight: bold;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<form action=\"join_db.jsp\" method=\"post\" name=\"joinForm\">\r\n");
      out.write("		<p id=\"text\"></p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<label> 아이디\r\n");
      out.write("				<input type=\"text\" name=\"userid\" id=\"userid\"/>\r\n");
      out.write("			</label>\r\n");
      out.write("			<input type=\"button\" value=\"중복확인\" onclick=\"checkId();\"/>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<label> 비밀번호\r\n");
      out.write("				<input type=\"password\" name=\"userpw\">\r\n");
      out.write("			</label>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<label> 비밀번호 확인\r\n");
      out.write("				<input type=\"password\" name=\"userpw_re\">\r\n");
      out.write("			</label>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<label> 이름\r\n");
      out.write("				<input type=\"text\" name=\"username\">\r\n");
      out.write("			</label>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			성별<br>\r\n");
      out.write("			<label> 남자\r\n");
      out.write("				<input type=\"radio\" name=\"usergender\" value=\"M\" checked/>\r\n");
      out.write("			</label>\r\n");
      out.write("			<label> 여자\r\n");
      out.write("				<input type=\"radio\" name=\"usergender\" value=\"W\"/>\r\n");
      out.write("			</label>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<label> 휴대폰 번호\r\n");
      out.write("				<input type=\"text\" name=\"userphone\"/>\r\n");
      out.write("			</label>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>우편번호\r\n");
      out.write("			<input name=\"zipcode\" type=\"text\" id=\"sample6_postcode\" placeholder=\"우편번호\">\r\n");
      out.write("			<input type=\"button\" onclick=\"sample6_execDaumPostcode()\" value=\"우편번호 찾기\"><br>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>주소\r\n");
      out.write("			<input name=\"addr\" type=\"text\" id=\"sample6_address\" placeholder=\"주소\"><br>\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>상세주소\r\n");
      out.write("			<input name=\"addrdetail\" type=\"text\" id=\"sample6_detailAddress\" placeholder=\"상세주소\">\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>참고항목\r\n");
      out.write("			<input name=\"addretc\" type=\"text\" id=\"sample6_extraAddress\" placeholder=\"참고항목\">\r\n");
      out.write("		</p>\r\n");
      out.write("		<p>\r\n");
      out.write("			<input type=\"button\" value=\"가입완료\" onclick=\"sendit()\">\r\n");
      out.write("		</p>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("	<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("	<script type=\"text/javascript\" src=\"../js/user.js\"></script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
